// middlewares/authMiddleware.js
const { verifyAccessToken } = require("../utils/jwt");

/**
 * Middleware ki·ªÉm tra JWT access token trong cookie ho·∫∑c header
 * - ∆Øu ti√™n cookie "access_token", fallback header "Authorization: Bearer <token>"
 * - G·∫Øn req.user v·ªõi c·∫£ 2 field: id & user_id (number), ƒë·ªÉ downstream ƒë·ªçc th·ªëng nh·∫•t
 * - ƒê·ªìng th·ªùi g·∫Øn res.locals.user ƒë·ªÉ c√°c router kh√°c c≈©ng truy c·∫≠p ƒë∆∞·ª£c
 */
function authMiddleware(req, res, next) {
  try {
    // 1) L·∫•y token t·ª´ cookie ho·∫∑c header Authorization
    let token = req.cookies?.access_token;
    if (!token) {
      const authz = req.headers["authorization"] || req.headers["Authorization"];
      if (typeof authz === "string") {
        // ch·∫•p nh·∫≠n "Bearer <token>" ho·∫∑c token tr·∫ßn
        const parts = authz.trim().split(/\s+/);
        token = parts.length === 2 && /^Bearer$/i.test(parts[0]) ? parts[1] : authz;
      }
    }

    if (!token) {
      return res.status(401).json({ error: "Unauthorized: Missing access token" });
    }

    // 2) X√°c th·ª±c token (verifyAccessToken c√≥ th·ªÉ tr·∫£ null ho·∫∑c throw)
    const decoded = verifyAccessToken(token);
    if (!decoded) {
      return res.status(401).json({ error: "Unauthorized: Invalid or expired token" });
    }

    // 3) Chu·∫©n ho√° user
    //    ∆Øu ti√™n decoded.user_id; n·∫øu payload d√πng sub/id th√¨ fallback
    const rawUid = decoded.user_id ?? decoded.id ?? decoded.sub ?? decoded.userId ?? null;

    const uidNum = Number(rawUid);
    if (!Number.isFinite(uidNum)) {
      return res.status(401).json({ error: "Unauthorized: Invalid user id in token" });
    }

    const user = {
      id: uidNum, // <‚Äî c√°i statefulHandler ƒë·ªçc
      user_id: uidNum, // <‚Äî t∆∞∆°ng th√≠ch c√°c n∆°i kh√°c
      username: decoded.username ?? decoded.name ?? null,
      roles: decoded.roles ?? decoded.role ?? null,
      // gi·ªØ l·∫°i to√†n b·ªô payload (an to√†n cho logging/debug n·∫øu c·∫ßn)
      _tokenPayload: decoded,
    };

    // 4) G·∫Øn v√†o req & res.locals (ƒë·ª´ng ghi ƒë√® l·∫ßn 2!)
    req.user = user;
    res.locals.user = user;

    // Debug nh·∫π (tu·ª≥ ch·ªçn)
    // console.log('üü¢ Auth OK:', { id: user.id, username: user.username });

    return next();
  } catch (err) {
    console.error("Auth middleware error:", err?.message || err);
    return res.status(401).json({ error: "Unauthorized" });
  }
}

module.exports = authMiddleware;
